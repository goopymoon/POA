// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © keio1989

//@version=5

import dokang/POA/9 as POA

strategy("Supertrend Mult TP", overlay=true, initial_capital=1000, process_orders_on_close=true, default_qty_type=strategy.percent_of_equity, default_qty_value=25, commission_type=strategy.commission.percent, commission_value=0.04)

// BAR COLOR //

color_1 = #e9f3ff
color_2 = #bbd9fb
color_3 = #5b9cf6
color_4 = #1848cc
color_5 = #0c3299
color_6 = #ffe9ea 
color_7 = #fccbcd
color_8 = #faa1a4
color_9 = #b33e48
color_10 = #801922

//CALC DATE ------------------------------------------------------------------------------------------------------------
start_time   = input.time(defval = timestamp("31 Dec 2000 15:00 +0000"), title = "Start   ", inline="timestart", group='═════ TRADE SETTING')
end_time     = input.time(defval = timestamp("31 Dec 2099 00:00 +0000"), title = "End  ", inline="timeend", group='═════ TRADE SETTING')

timeCond     = (time > start_time) and (time < end_time)

select_bot   = input.string('PoA Bot', 'Select Your Bot ', inline="bot", options=['PoA Bot', 'TVExtBot'])

//POA BOT --------------------------------------------------------------------------------------------------------------
password     = input.string(defval='password', title='Password ', inline="pw", group='POA Bot')
in_trade     = POA.in_trade(start_time, end_time)

//TVEXTBOT -------------------------------------------------------------------------------------------------------------
tvextbot_long_entry  = input.string("Long Entry Message", "Entry   ", inline='entry', group='TVExtBot')
tvextbot_long_exit   = input.string("Long TP Message", "TP     ", inline='tp', group='TVExtBot')
tvextbot_long_close  = input.string("Long Close Message", "Close   ", inline='close', group='TVExtBot')

tvextbot_short_entry = input.string("Short Entry Message", "", inline='entry', group='TVExtBot')
tvextbot_short_eixt  = input.string("Short TP Message", "", inline='tp', group='TVExtBot')
tvextbot_short_close = input.string("Short Close Message", "", inline='close', group='TVExtBot')

active_long  = input.bool(true, "Activate Long", inline="activate")
active_short = input.bool(true, "Activate Short", inline="activate")

//ALERT MESSAGE --------------------------------------------------------------------------------------------------------
long_entry_message(user_input_style) =>
    user_input_style == 'PoA Bot' ? POA.entry_message(password) : user_input_style == 'TVExtBot' ? tvextbot_long_entry : na
long_exit_message(user_input_style) =>
    user_input_style == 'PoA Bot' ? POA.exit_message(password) : user_input_style == 'TVExtBot' ? tvextbot_long_exit : na
long_close_message(user_input_style) =>
    user_input_style == 'PoA Bot' ? POA.close_message(password) : user_input_style == 'TVExtBot' ? tvextbot_long_close : na

short_entry_message(user_input_style) =>
    user_input_style == 'PoA Bot' ? POA.entry_message(password) : user_input_style == 'TVExtBot' ? tvextbot_short_entry : na
short_exit_message(user_input_style) =>
    user_input_style == 'PoA Bot' ? POA.exit_message(password) : user_input_style == 'TVExtBot' ? tvextbot_short_eixt : na
short_close_message(user_input_style) =>
    user_input_style == 'PoA Bot' ? POA.close_message(password) : user_input_style == 'TVExtBot' ? tvextbot_short_close : na

//SUPERTREND -----------------------------------------------------------------------------------------------------------
supertrend_visible = input.bool(true, 'Trend Line & Fill ', group='═════ Super Trend')
sttimeframe2       = input.timeframe('', 'Trail Time Frame ', inline='st5', group='═════ Super Trend')
atrPeriod2         = input.int(10, 'Length ', inline='st6', group='═════ Super Trend')
factor2            = input.float(4.0, 'Factor ', step = 0.1, inline='st6', group='═════ Super Trend')
sttimeframe1       = input.timeframe('D', 'High Time Frame ', inline='st3', group='═════ Super Trend')
atrPeriod1         = input.int(10, 'Length ', inline='st4', group='═════ Super Trend')
factor1            = input.float(2.0, 'Factor ', step = 0.1, inline='st4', group='═════ Super Trend')

rp_security(_symbol, _res, _src) =>
    request.security(_symbol, _res, _src[1], lookahead = barmerge.lookahead_on)

Supertrend1(factor1, atrPeriod1) =>

    Up1 = hl2 - factor1 * ta.atr(atrPeriod1)
    Dn1 = hl2 + factor1 * ta.atr(atrPeriod1)

    TrendUp1 = 0.0
    TrendUp1 := close[1] > TrendUp1[1] ? math.max(Up1, TrendUp1[1]) : Up1
    TrendDown1 = 0.0
    TrendDown1 := close[1] < TrendDown1[1] ? math.min(Dn1, TrendDown1[1]) : Dn1
    Trend1 = 0.0
    Trend1 := close > TrendDown1[1] ? 1 : close < TrendUp1[1] ? -1 : nz(Trend1[1], 1)
    Tsl1 = Trend1 == 1 ? TrendUp1 : TrendDown1

    S_Buy1 = Trend1 == 1 ? 1 : 0
    S_Sell1 = Trend1 != 1 ? 1 : 0

    [Trend1, Tsl1]

[Trend1, Tsl1] = Supertrend1(factor1, atrPeriod1)

res1 = sttimeframe1
ST1_Trend_MTF = rp_security(syminfo.tickerid, res1, Trend1)
ST1_Tsl_MTF   = rp_security(syminfo.tickerid, res1, Tsl1)

Supertrend2(factor2, atrPeriod2) =>

    Up2 = hl2 - factor2 * ta.atr(atrPeriod2)
    Dn2 = hl2 + factor2 * ta.atr(atrPeriod2)

    TrendUp2 = 0.0
    TrendUp2 := close[1] > TrendUp2[1] ? math.max(Up2, TrendUp2[1]) : Up2
    TrendDown2 = 0.0
    TrendDown2 := close[1] < TrendDown2[1] ? math.min(Dn2, TrendDown2[1]) : Dn2
    Trend2 = 0.0
    Trend2 := close > TrendDown2[1] ? 1 : close < TrendUp2[1] ? -1 : nz(Trend2[1], 1)
    Tsl2 = Trend2 == 1 ? TrendUp2 : TrendDown2

    S_Buy2 = Trend2 == 1 ? 1 : 0
    S_Sell2 = Trend2 != 1 ? 1 : 0

    [Trend2, Tsl2]

[Trend2, Tsl2] = Supertrend2(factor2, atrPeriod2)

res2 = sttimeframe2
ST2_Trend_MTF = rp_security(syminfo.tickerid, res2, Trend2)
ST2_Tsl_MTF   = rp_security(syminfo.tickerid, res2, Tsl2)

bodyMiddle  = plot((open + close) / 2, editable=false, display=display.none)

upTrend     = plot(ST1_Trend_MTF == 1 ? ST1_Tsl_MTF : na, "Up Trend", color=color_5, linewidth=2, style=plot.style_linebr, editable=false, display = supertrend_visible ? display.pane : display.none)
downTrend   = plot(ST1_Trend_MTF == 1 ? na : ST1_Tsl_MTF, "Down Trend", color=color_10, linewidth=2, style=plot.style_linebr, editable=false, display = supertrend_visible ? display.pane : display.none)
upTrend2    = plot(ST2_Trend_MTF == 1 ? ST2_Tsl_MTF : na, "Up Trend", color=color_3, linewidth=1, style=plot.style_linebr, editable=false, display = supertrend_visible ? display.pane : display.none)
downTrend2  = plot(ST2_Trend_MTF == 1 ? na : ST2_Tsl_MTF, "Down Trend", color=color_8, linewidth=1, style=plot.style_linebr, editable=false, display = supertrend_visible ? display.pane : display.none)

fill(bodyMiddle, upTrend, color.new(color_5, 90), editable=false, display = supertrend_visible ? display.all : display.none)
fill(bodyMiddle, downTrend, color.new(color_10, 90), editable=false, display = supertrend_visible ? display.all : display.none)
fill(bodyMiddle, upTrend2, color.new(color_3, 90), editable=false, display = supertrend_visible ? display.all : display.none)
fill(bodyMiddle, downTrend2, color.new(color_8, 90), editable=false, display = supertrend_visible ? display.all : display.none)

//VOLUME ---------------------------------------------------------------------------------------------------------------
bcolor_enabled     = input.bool(true, 'Colored Bar ', group='═════ Volume', inline='bar')

length             = input.int(20, 'Volume MA Length ', inline='vol', group='═════ Volume')
avrg               = ta.sma(volume, length)

thresholdExtraHigh = input.float(4, 'High  ', inline='vol1', group='═════ Volume')
thresholdHigh      = input(2.5, 'Medium ', inline='vol1', group='═════ Volume')
thresholdMedium    = input.float(1, 'Normal ', inline='vol2', group='═════ Volume')
thresholdNormal    = input(0.5, 'Low     ', inline='vol2', group='═════ Volume')

vol1 = volume > avrg * thresholdExtraHigh
vol2 = volume >= avrg * thresholdHigh and volume <= avrg * thresholdExtraHigh
vol3 = volume >= avrg * thresholdMedium and volume <= avrg * thresholdHigh
vol4 = volume >= avrg * thresholdNormal and volume <= avrg * thresholdMedium
vol5 = volume < avrg * thresholdNormal

color_bar = ST1_Trend_MTF == 1 and vol1 ? color_5 : ST1_Trend_MTF == 1 and vol2 ? color_4 : ST1_Trend_MTF == 1 and vol3 ? color_3 : ST1_Trend_MTF == 1 and vol4 ? color_2 : ST1_Trend_MTF == 1 and vol5 ? color_1 : vol1 ? color_10 : vol2 ? color_9 : vol3 ? color_8 : vol4 ? color_7 : vol5 ? color_6 : na

plotcandle(open, high, low, close, color= bcolor_enabled ? color_bar : na, bordercolor=color.new(#2a2e39, 0), wickcolor=color.new(#2a2e39, 0))

//VOLATILITY -----------------------------------------------------------------------------------------------------------
volatilityFilterInput = input.bool(true,title="StdDev ", group = "═════ Volatility ", inline="Vol")
volatilityFilterStDevLength = input(15,title="",group = "═════ Volatility ", inline="Vol")
volatilityStDevMaLength = input(20,title="> MA",group = "═════ Volatility ", inline="Vol")

stdDevClose = ta.stdev(close, volatilityFilterStDevLength)
volatilityCondition = volatilityFilterInput ? stdDevClose > ta.sma(stdDevClose,volatilityStDevMaLength) : true

//RSI ------------------------------------------------------------------------------------------------------------------
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiSourceInput = close
maTypeInput    = "SMA"
rsiLengthInput = input.int(14, "Length ", inline="rsi", group='═════ RSI')
maLengthInput  = input.int(14, "MA Length ", inline="rsi", group='═════ RSI')
rsiUpperBand   = input.int(60, "RSI Upper band ", group='═════ RSI')
rsiLowerBand   = input.int(40, "RSI Lower band ", group='═════ RSI')

active_rsi_long_close  = input.bool(true, "", inline="rsilong", group="═════ RSI")
active_rsi_short_close = input.bool(true, "", inline="rsishort", group="═════ RSI")

long_rsi_size  = input.float(10, "RSI Long Close Size %", step = 0.1, inline="rsilong", group="═════ RSI")
short_rsi_size = input.float(10, "RSI Short Close Size %", step = 0.1, inline="rsishort", group="═════ RSI")

rsiup   = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsidown = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi     = rsidown == 0 ? 100 : rsiup == 0 ? 0 : 100 - (100 / (1 + rsiup / rsidown))
rsiMA   = ma(rsi, maLengthInput, maTypeInput)

rsi_buy_signal = rsi < rsiLowerBand and ta.crossover(rsi, rsiMA) and volatilityCondition
rsi_sell_signal = rsi > rsiUpperBand and ta.crossunder(rsi, rsiMA) and volatilityCondition

//STOCH RSI ------------------------------------------------------------------------------------------------------------
stochsrc = input(close, title="Stoch RSI Source ", group="═════ Stoch RSI")
smoothK  = input.int(3, "K ", minval=1, inline="rsi1", group="═════ Stoch RSI")
smoothD  = input.int(3, "D ", minval=1, inline="rsi1", group="═════ Stoch RSI")
lengthRSI   = input.int(14, "RSI Length ", minval=1, inline="rsi2", group="═════ Stoch RSI")
lengthStoch = input.int(14, "Stoch Length ", minval=1, inline="rsi2", group="═════ Stoch RSI")
stochrsiUpperBand = input.int(80, "Stoch RSI Upper band ", group='═════ Stoch RSI')
stochrsiLowerBand = input.int(20, "Stoch RSI Lower band ", group='═════ Stoch RSI')

active_stoch_long_close  = input.bool(false, "", inline="rsilong", group="═════ Stoch RSI")
active_stoch_short_close = input.bool(false, "", inline="rsishort", group="═════ Stoch RSI")

long_stoch_size  = input.float(5, "Stoch Long Close Size %", step = 0.1, inline="rsilong", group="═════ Stoch RSI")
short_stoch_size = input.float(5, "Stoch Short Close Size %", step = 0.1, inline="rsishort", group="═════ Stoch RSI")

rsi1 = ta.rsi(stochsrc, lengthRSI)
k    = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)
d    = ta.sma(k, smoothD)

co   = ta.crossover(k,d)
cu   = ta.crossunder(k,d)

stoch_long_close  = cu and k > stochrsiUpperBand and volatilityCondition
stoch_short_close = co and k < stochrsiLowerBand and volatilityCondition

//BOLLINGER BANDS  -----------------------------------------------------------------------------------------------------
visible_bb    = input.bool(true, "Visble Bollinger Bands", group="═════ Bollinger Bands")

active_bb_atr = input.bool(true, "Use Bollinger Bands Trail", group="═════ Bollinger Bands")
active_bb_long_close  = input.bool(true, "", inline="bb1", group="═════ Bollinger Bands")
active_bb_short_close = input.bool(true, "", inline="bb2", group="═════ Bollinger Bands")
long_bb_size  = input.float(10, "Long BB Close Size %", step = 0.1, inline="bb1", group="═════ Bollinger Bands")
short_bb_size = input.float(10, "Short BB Close Size %", step = 0.1, inline="bb2", group="═════ Bollinger Bands")

bbsrc    = input(close, title="Source ", group="═════ Bollinger Bands")
bblength = input.int(20, minval=1, title="BB Length ", group="═════ Bollinger Bands")
mult     = input.float(2.0, minval=0.001, maxval=50, title="Deviation ", group="═════ Bollinger Bands")
basis    = ta.sma(bbsrc, bblength)
dev      = mult * ta.stdev(bbsrc, bblength)
upper    = basis + dev
lower    = basis - dev
plot(visible_bb ? basis : na, "BB Basis ", color=#FF6D00)
p1       = plot(visible_bb ? upper : na, "BB Upper ", color=ST1_Trend_MTF == 1 ? color_2 : color_7)
p2       = plot(visible_bb ? lower : na, "BB Lower ", color=ST1_Trend_MTF == 1 ? color_2 : color_7)
fill(p1, p2, title = "BB Background ", color=ST1_Trend_MTF == 1 ? color.new(color_4, 90):  color.new(color_9, 90), editable=false, display=visible_bb ? display.all : display.none)

bb_buy_signal  = ta.crossunder(close, lower) and volatilityCondition
bb_sell_signal = ta.crossover(close, upper) and volatilityCondition

//LONG TP/SL -----------------------------------------------------------------------------------------------------------
ltp1Open   = input.bool(false, "", inline="longtp1", group = "═════ Long TP / SL")
ltp1       = input.float(3, "Long TP-1", step = 0.1, inline="longtp1", group = "═════ Long TP / SL") / 100
ltp1Amount = input.int(10, " Amount", step = 1, inline="longtp1", group = "═════ Long TP / SL")

ltp2Open   = input.bool(false, "", inline="longtp2", group = "═════ Long TP / SL")
ltp2       = input.float(5, "Long TP-2", step = 0.1, inline="longtp2", group = "═════ Long TP / SL") / 100
ltp2Amount = input.int(10, " Amount", step = 1, inline="longtp2", group = "═════ Long TP / SL")

ltp3Open   = input.bool(false, "", inline="longtp3", group = "═════ Long TP / SL")
ltp3       = input.float(7, "Long TP-3", step = 0.1, inline="longtp3", group = "═════ Long TP / SL") / 100
ltp3Amount = input.int(10, "Amount", step = 1, inline="longtp3", group = "═════ Long TP / SL")

ltp4Open   = input.bool(false, "", inline="longtp4", group = "═════ Long TP / SL")
ltp4       = input.float(10, "Long TP-4", step = 0.1, inline="longtp4", group = "═════ Long TP / SL") / 100
ltp4Amount = input.int(10, "Amount", step = 1, inline="longtp4", group = "═════ Long TP / SL")

ltp5Open   = input.bool(false, "", inline="longtp5", group = "═════ Long TP / SL")
ltp5       = input.float(15, "Long TP-5", step = 0.1, inline="longtp5", group = "═════ Long TP / SL") / 100
ltp5Amount = input.int(10, "Amount", step = 1, inline="longtp5", group = "═════ Long TP / SL")

ltp6Open   = input.bool(false, "", inline="longtp6", group = "═════ Long TP / SL")
ltp6       = input.float(20, "Long TP-6", step = 0.1, inline="longtp6", group = "═════ Long TP / SL") / 100
ltp6Amount = input.int(10, "Amount", step = 1, inline="longtp6", group = "═════ Long TP / SL")

ltp7Open   = input.bool(false, "", inline="longtp7", group = "═════ Long TP / SL")
ltp7       = input.float(25, "Long TP-7", step = 0.1, inline="longtp7", group = "═════ Long TP / SL") / 100
ltp7Amount = input.int(10, "Amount", step = 1, inline="longtp7", group = "═════ Long TP / SL")

ltp8Open   = input.bool(false, "", inline="longtp8", group = "═════ Long TP / SL")
ltp8       = input.float(30, "Long TP-8", step = 0.1, inline="longtp8", group = "═════ Long TP / SL") / 100
ltp8Amount = input.int(10, "Amount", step = 1, inline="longtp8", group = "═════ Long TP / SL")

ltp9Open   = input.bool(false, "", inline="longtp9", group = "═════ Long TP / SL")
ltp9       = input.float(40, "Long TP-9", step = 0.1, inline="longtp9", group = "═════ Long TP / SL") / 100
ltp9Amount = input.int(10, "Amount", step = 1, inline="longtp9", group = "═════ Long TP / SL")

lslOpen    = input.bool(false, "", inline="longlsl", group = "═════ Long TP / SL")
lsl        = input.float(10, "Long Stop Loss", step = 0.1, inline="longlsl", group = "═════ Long TP / SL")/ 100
long_sl    = strategy.position_avg_price * (1 - lsl)

//SHORT TP/SL ----------------------------------------------------------------------------------------------------------
stp1Open   = input.bool(false, "", inline="shorttp1", group = "═════ Short TP / SL")
stp1       = input.float(1, "Short TP-1", step = 0.1, inline="shorttp1", group = "═════ Short TP / SL") / 100
stp1Amount = input.int(10, "Amount", step = 1, inline="shorttp1", group = "═════ Short TP / SL")

stp2Open   = input.bool(false, "", inline="shorttp2", group = "═════ Short TP / SL")
stp2       = input.float(3, "Short TP-2", step = 0.1, inline="shorttp2", group = "═════ Short TP / SL") / 100
stp2Amount = input.int(10, "Amount", step = 1, inline="shorttp2", group = "═════ Short TP / SL")

stp3Open   = input.bool(false, "", inline="shorttp3", group = "═════ Short TP / SL")
stp3       = input.float(5, "Short TP-3", step = 0.1, inline="shorttp3", group = "═════ Short TP / SL") / 100
stp3Amount = input.int(10, "Amount", step = 1, inline="shorttp3", group = "═════ Short TP / SL")

stp4Open   = input.bool(false, "", inline="shorttp4", group = "═════ Short TP / SL")
stp4       = input.float(7, "Short TP-4", step = 0.1, inline="shorttp4", group = "═════ Short TP / SL") / 100
stp4Amount = input.int(10, "Amount", step = 1, inline="shorttp4", group = "═════ Short TP / SL")

stp5Open   = input.bool(false, "", inline="shorttp5", group = "═════ Short TP / SL")
stp5       = input.float(10, "Short TP-5", step = 0.1, inline="shorttp5", group = "═════ Short TP / SL") / 100
stp5Amount = input.int(10, "Amount", step = 1, inline="shorttp5", group = "═════ Short TP / SL")

stp6Open   = input.bool(false, "", inline="shorttp6", group = "═════ Short TP / SL")
stp6       = input.float(15, "Short TP-6", step = 0.1, inline="shorttp6", group = "═════ Short TP / SL") / 100
stp6Amount = input.int(10, "Amount", step = 1, inline="shorttp6", group = "═════ Short TP / SL")

stp7Open   = input.bool(false, "", inline="shorttp7", group = "═════ Short TP / SL")
stp7       = input.float(20, "Short TP-7", step = 0.1, inline="shorttp7", group = "═════ Short TP / SL") / 100
stp7Amount = input.int(10, "Amount", step = 1, inline="shorttp7", group = "═════ Short TP / SL")

stp8Open   = input.bool(false, "", inline="shorttp8", group = "═════ Short TP / SL")
stp8       = input.float(25, "Short TP-8", step = 0.1, inline="shorttp8", group = "═════ Short TP / SL") / 100
stp8Amount = input.int(10, "Amount", step = 1, inline="shorttp8", group = "═════ Short TP / SL")

stp9Open   = input.bool(false, "", inline="shorttp9", group = "═════ Short TP / SL")
stp9       = input.float(30, "Short TP-9", step = 0.1, inline="shorttp9", group = "═════ Short TP / SL") / 100
stp9Amount = input.int(10, "Amount", step = 1, inline="shorttp9", group = "═════ Short TP / SL")

sslOpen    = input.bool(false, "", inline="shortssl", group = "═════ Short TP / SL")
ssl        = input.float(10, "Short Stop Loss", step = 0.1, inline="shortssl", group = "═════ Short TP / SL") / 100
short_sl   = strategy.position_avg_price * (1 + ssl)

last_entry_price = strategy.opentrades.entry_price(strategy.opentrades - 1)

longentrycond1   = active_bb_atr ? in_trade and active_long and ST1_Trend_MTF == 1 and ST2_Trend_MTF == 1 and close > basis : in_trade and active_long and ST1_Trend_MTF == 1 and ST2_Trend_MTF == 1
longentrycond2   = in_trade and active_short and sslOpen and strategy.position_size < 0 and close > strategy.position_avg_price * (1 + ssl)

shortentrycond1  = active_bb_atr ? in_trade and active_short and ST1_Trend_MTF != 1 and ST2_Trend_MTF != 1 and close < basis : in_trade and active_short and ST1_Trend_MTF != 1 and ST2_Trend_MTF != 1
shortentrycond2  = in_trade and active_long and lslOpen and strategy.position_size > 0 and close < strategy.position_avg_price * (1 - lsl) 

longclosecond1   = active_bb_atr ? in_trade and ST1_Trend_MTF != 1 or in_trade and ST2_Trend_MTF != 1 or in_trade and bb_buy_signal : in_trade and ST1_Trend_MTF != 1 or in_trade and ST2_Trend_MTF != 1
longclosecond2   = in_trade and lslOpen and strategy.position_size > 0 and close < strategy.position_avg_price * (1 - lsl)

shortclosecond1  = active_bb_atr ? in_trade and ST1_Trend_MTF == 1 or in_trade and ST2_Trend_MTF == 1 or in_trade and bb_sell_signal : in_trade and ST1_Trend_MTF == 1 or in_trade and ST2_Trend_MTF == 1
shortclosecond2  = in_trade and sslOpen and strategy.position_size < 0 and close > strategy.position_avg_price * (1 + ssl)

//Long Entry
if longentrycond1
    strategy.entry("LONG", strategy.long, alert_message=long_entry_message(select_bot))
if longclosecond1 or longclosecond2
    strategy.close("LONG", "close Long", alert_message=long_close_message(select_bot))
//Short Entry
if shortentrycond1
    strategy.entry("SHORT", strategy.short, alert_message=short_entry_message(select_bot))
if shortclosecond1 or shortclosecond2
    strategy.close("SHORT", "close Short", alert_message=short_close_message(select_bot))

//RSI Close
if active_rsi_long_close and rsi_sell_signal and last_entry_price < close
    strategy.close("LONG", "RSI Exit", qty_percent=long_rsi_size, alert_message=long_exit_message(select_bot))
if active_rsi_short_close and rsi_buy_signal and last_entry_price > close
    strategy.close("SHORT", "RSI Exit", qty_percent=short_rsi_size, alert_message=short_exit_message(select_bot))
//Stoch RSI Close
if active_stoch_long_close and stoch_long_close and last_entry_price < close
    strategy.close("LONG", "Stoch Exit", qty_percent=long_stoch_size, alert_message=long_exit_message(select_bot))
if active_stoch_short_close and stoch_short_close and last_entry_price > close
    strategy.close("SHORT", "Stoch Exit", qty_percent=short_stoch_size, alert_message=short_exit_message(select_bot))
//BB Close
if active_bb_long_close and bb_sell_signal and last_entry_price < close
    strategy.close("LONG", "BB Exit", qty_percent=long_bb_size, alert_message=long_exit_message(select_bot))
if active_bb_short_close and bb_buy_signal and last_entry_price > close
    strategy.close("SHORT", "BB Exit", qty_percent=short_bb_size, alert_message=short_exit_message(select_bot))

// Long TP
if (ltp1Open) and strategy.position_size > 0
    strategy.exit("TP-1", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp1), qty_percent=ltp1Amount, alert_message=long_exit_message(select_bot))
if (ltp2Open) and strategy.position_size > 0
    strategy.exit("TP-2", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp2), qty_percent=ltp2Amount, alert_message=long_exit_message(select_bot))    
if (ltp3Open) and strategy.position_size > 0    
    strategy.exit("TP-3", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp3), qty_percent=ltp3Amount, alert_message=long_exit_message(select_bot))
if (ltp4Open) and strategy.position_size > 0
    strategy.exit("TP-4", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp4), qty_percent=ltp4Amount, alert_message=long_exit_message(select_bot))
if (ltp5Open) and strategy.position_size > 0    
    strategy.exit("TP-5", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp5), qty_percent=ltp5Amount, alert_message=long_exit_message(select_bot))
if (ltp6Open) and strategy.position_size > 0    
    strategy.exit("TP-6", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp6), qty_percent=ltp6Amount, alert_message=long_exit_message(select_bot))
if (ltp7Open) and strategy.position_size > 0    
    strategy.exit("TP-7", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp7), qty_percent=ltp7Amount, alert_message=long_exit_message(select_bot))
if (ltp8Open) and strategy.position_size > 0    
    strategy.exit("TP-8", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp8), qty_percent=ltp8Amount, alert_message=long_exit_message(select_bot))
if (ltp9Open) and strategy.position_size > 0    
    strategy.exit("TP-9", from_entry="LONG", limit=strategy.position_avg_price * (1 + ltp9), qty_percent=ltp9Amount, alert_message=long_exit_message(select_bot))
// Short TP
if (stp1Open) and strategy.position_size < 0
    strategy.exit("TP-1", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp1), qty_percent=stp1Amount, alert_message=short_exit_message(select_bot))
if (stp2Open) and strategy.position_size < 0
    strategy.exit("TP-2", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp2), qty_percent=stp2Amount, alert_message=short_exit_message(select_bot))
if (stp3Open) and strategy.position_size < 0
    strategy.exit("TP-3", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp3), qty_percent=stp3Amount, alert_message=short_exit_message(select_bot))
if (stp4Open) and strategy.position_size < 0
    strategy.exit("TP-4", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp4), qty_percent=stp4Amount, alert_message=short_exit_message(select_bot))
if (stp5Open) and strategy.position_size < 0
    strategy.exit("TP-5", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp5), qty_percent=stp5Amount, alert_message=short_exit_message(select_bot))
if (stp6Open) and strategy.position_size < 0
    strategy.exit("TP-6", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp6), qty_percent=stp6Amount, alert_message=short_exit_message(select_bot))
if (stp7Open) and strategy.position_size < 0
    strategy.exit("TP-7", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp7), qty_percent=stp7Amount, alert_message=short_exit_message(select_bot))
if (stp8Open) and strategy.position_size < 0
    strategy.exit("TP-8", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp8), qty_percent=stp8Amount, alert_message=short_exit_message(select_bot))
if (stp9Open) and strategy.position_size < 0
    strategy.exit("TP-9", from_entry="SHORT", limit=strategy.position_avg_price * (1 - stp9), qty_percent=stp9Amount, alert_message=short_exit_message(select_bot))

//Table

PnL     = strategy.grossprofit - strategy.grossloss
ex_PnL  = math.round(strategy.openprofit, 1)

totalbalance  = strategy.initial_capital + strategy.netprofit

used_equity   = math.round(strategy.position_avg_price * strategy.position_size)
ratio_equity  = strategy.position_size > 0 ? math.round(used_equity / totalbalance * 100, 1) : 0

mdd     = strategy.opentrades.max_drawdown(strategy.opentrades - 1)

totalTrades   = strategy.closedtrades
winningTrades = na(totalTrades) ? na : totalTrades - strategy.losstrades

winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0

profitFactor  = math.abs(strategy.grossprofit) > 0 ? strategy.grossprofit / math.abs(strategy.grossloss) : na

avgBarsPerTrade() =>
    sumBarsPerTrade = 0
    for tradeNo = 0 to strategy.closedtrades - 1
        // Loop through all closed trades, starting with the oldest.
        sumBarsPerTrade += strategy.closedtrades.exit_bar_index(tradeNo) - strategy.closedtrades.entry_bar_index(tradeNo) + 1
    result = nz(sumBarsPerTrade / strategy.closedtrades)

//TABLE ----------------------------------------------------------------------------------------------------------------
show_status           = input.bool(true,'', group='Status Table', inline='t1')
status_text_size      = input.string(size.tiny, 'Size ', options=[size.tiny, size.small, size.normal], group='Status Table', inline='t1')
status_table_position = input.string(position.bottom_left, 'Position ', options=[position.bottom_left, position.bottom_right, position.bottom_center, position.top_left, position.top_right, position.top_center], group='Status Table', inline='t1')

show_performance           = input.bool(true, '', group='Profit Table', inline='t2')
performance_text_size      = input.string(size.small, 'Size ', options=[size.tiny, size.small, size.normal], group='Profit Table', inline='t2')
performance_table_position = input.string(position.bottom_right, 'Position ', options=[position.bottom_left, position.bottom_right, position.bottom_center, position.top_left, position.top_right, position.top_center], group='Profit Table', inline='t2')

// ------------------------------------------------------------------------------------------------------------------ //

profit_color1 = PnL > 0 ? color.lime : color.red
profit_color2 = strategy.openprofit < 0 ? color.red : color.lime

var Table = table.new(status_table_position, columns=10, rows=20, border_width=1, bgcolor=color.black, border_color=color.gray)

if show_status
    table.cell(table_id=Table, column=0, row=0, text='Position Size', text_size=status_text_size, text_color=color.gray)
    table.cell(table_id=Table, column=0, row=1, text=str.tostring(strategy.position_size), text_size=status_text_size, text_color=color.green)
    table.cell(table_id=Table, column=0, row=2, text='Avg Price', text_size=status_text_size, text_color=color.gray)
    table.cell(table_id=Table, column=0, row=3, text=str.tostring(math.round_to_mintick(strategy.position_avg_price)), text_size=status_text_size, text_color=color.green)

    table.cell(table_id=Table, column=1, row=0, text='Unrealized PnL', text_size=status_text_size, text_color=color.gray)
    table.cell(table_id=Table, column=1, row=1, text=str.tostring(math.round(strategy.openprofit, 1)) + ' ' + syminfo.currency, text_size=status_text_size, text_color=profit_color2)
    table.cell(table_id=Table, column=1, row=2, text_color=color.gray, text_size=status_text_size, text='Net profit')
    table.cell(table_id=Table, column=1, row=3, text=str.tostring(math.round(PnL, 1)) + ' ' + syminfo.currency, text_size=status_text_size, text_color=profit_color1)

    table.cell(table_id=Table, column=2, row=0, text='Win Rate', text_size=status_text_size, text_color=color.gray)
    table.cell(table_id=Table, column=2, row=1, text=str.tostring(math.round(winRate, 1)), text_size=status_text_size, text_color=color.green)
    table.cell(table_id=Table, column=2, row=2, text='Profit Factor', text_size=status_text_size, text_color=color.gray)
    table.cell(table_id=Table, column=2, row=3, text=str.tostring(math.round(profitFactor, 2)), text_size=status_text_size, text_color=color.olive)

    table.cell(table_id=Table, column=4, row=0, text='Max Drawdown', text_size=status_text_size, text_color=color.gray)
    table.cell(table_id=Table, column=4, row=1, text=str.tostring(math.round(mdd, 1)), text_size=status_text_size, text_color=color.green)
    table.cell(table_id=Table, column=4, row=2, text='Bars Per Trade', text_size=status_text_size, text_color=color.gray)
    table.cell(table_id=Table, column=4, row=3, text=str.tostring(int(avgBarsPerTrade())), text_size=status_text_size, text_color=color.olive)

if show_performance
    new_month = month(time) != month(time[1])
    new_year  = year(time)  != year(time[1])
    
    eq = strategy.initial_capital + strategy.netprofit
    
    bar_pnl = eq / eq[1] - 1
    
    cur_month_pnl = 0.0
    cur_year_pnl  = 0.0
    
    // Current Monthly P&L
    cur_month_pnl := new_month ? 0.0 : 
                     (1 + cur_month_pnl[1]) * (1 + bar_pnl) - 1 
    
    // Current Yearly P&L
    cur_year_pnl := new_year ? 0.0 : 
                     (1 + cur_year_pnl[1]) * (1 + bar_pnl) - 1  
    
    // Arrays to store Yearly and Monthly P&Ls
    var month_pnl  = array.new_float(0)
    var month_time = array.new_int(0)
    
    var year_pnl  = array.new_float(0)
    var year_time = array.new_int(0)
    
    last_computed = false
    
    if (not na(cur_month_pnl[1]) and (new_month or barstate.islastconfirmedhistory))
        if (last_computed[1])
            array.pop(month_pnl)
            array.pop(month_time)
            
        array.push(month_pnl , cur_month_pnl[1])
        array.push(month_time, time[1])
    
    if (not na(cur_year_pnl[1]) and (new_year or barstate.islastconfirmedhistory))
        if (last_computed[1])
            array.pop(year_pnl)
            array.pop(year_time)
            
        array.push(year_pnl , cur_year_pnl[1])
        array.push(year_time, time[1])
    
    last_computed := barstate.islastconfirmedhistory ? true : nz(last_computed[1])
    
    // Monthly P&L Table    
    var monthly_table = table(na)
    
    if (barstate.islastconfirmedhistory)
        monthly_table := table.new(performance_table_position, columns = 14, rows = array.size(year_pnl) + 1, border_width = 1)
    
        table.cell(monthly_table, 0,  0, "", text_size=performance_text_size,     bgcolor = color.gray)
        table.cell(monthly_table, 1,  0, "Jan", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 2,  0, "Feb", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 3,  0, "Mar", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 4,  0, "Apr", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 5,  0, "May", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 6,  0, "Jun", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 7,  0, "Jul", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 8,  0, "Aug", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 9,  0, "Sep", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 10, 0, "Oct", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 11, 0, "Nov", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 12, 0, "Dec", text_size=performance_text_size,  bgcolor = color.gray)
        table.cell(monthly_table, 13, 0, "Year", text_size=performance_text_size, bgcolor = color.gray)
    
    
        for yi = 0 to array.size(year_pnl) - 1
            table.cell(monthly_table, 0,  yi + 1, str.tostring(year(array.get(year_time, yi))), text_size=performance_text_size, bgcolor = color.gray)
            
            y_color = array.get(year_pnl, yi) > 0 ? color.new(color.teal, transp = 40) : color.new(color.gray, transp = 40)
            table.cell(monthly_table, 13, yi + 1, str.tostring(math.round(array.get(year_pnl, yi) * 100, 1)), bgcolor = y_color, text_size=performance_text_size, text_color=color.new(color.white, 0))
            
        for mi = 0 to array.size(month_time) - 1
            m_row   = year(array.get(month_time, mi))  - year(array.get(year_time, 0)) + 1
            m_col   = month(array.get(month_time, mi)) 
            m_color = array.get(month_pnl, mi) > 0 ? color.new(color.teal, transp = 40) : color.new(color.gray, transp = 40)
            
            table.cell(monthly_table, m_col, m_row, str.tostring(math.round(array.get(month_pnl, mi) * 100, 1)), bgcolor = m_color, text_size=performance_text_size, text_color=color.new(color.white, 0))